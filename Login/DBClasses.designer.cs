#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DesktopNetworkEditor
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="na2880g")]
	public partial class DBClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertadmin_user(admin_user instance);
    partial void Updateadmin_user(admin_user instance);
    partial void Deleteadmin_user(admin_user instance);
    partial void Insertintersection(intersection instance);
    partial void Updateintersection(intersection instance);
    partial void Deleteintersection(intersection instance);
    partial void Insertstation(station instance);
    partial void Updatestation(station instance);
    partial void Deletestation(station instance);
    partial void Insertline_information(line_information instance);
    partial void Updateline_information(line_information instance);
    partial void Deleteline_information(line_information instance);
    partial void Insertline(line instance);
    partial void Updateline(line instance);
    partial void Deleteline(line instance);
    #endregion
		
		public DBClassesDataContext() : 
				base(global::DesktopNetworkEditor.Properties.Settings.Default.na2880gConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<admin_user> admin_users
		{
			get
			{
				return this.GetTable<admin_user>();
			}
		}
		
		public System.Data.Linq.Table<intersection> intersections
		{
			get
			{
				return this.GetTable<intersection>();
			}
		}
		
		public System.Data.Linq.Table<station> stations
		{
			get
			{
				return this.GetTable<station>();
			}
		}
		
		public System.Data.Linq.Table<line_information> line_informations
		{
			get
			{
				return this.GetTable<line_information>();
			}
		}
		
		public System.Data.Linq.Table<line> lines
		{
			get
			{
				return this.GetTable<line>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.admin_users")]
	public partial class admin_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _username;
		
		private string _password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public admin_user()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.intersections")]
	public partial class intersection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _intersect_id;
		
		private int _station_id;
		
		private int _line1_id;
		
		private int _line2_id;
		
		private EntityRef<station> _station;
		
		private EntityRef<line> _line;
		
		private EntityRef<line> _line1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onintersect_idChanging(int value);
    partial void Onintersect_idChanged();
    partial void Onstation_idChanging(int value);
    partial void Onstation_idChanged();
    partial void Online1_idChanging(int value);
    partial void Online1_idChanged();
    partial void Online2_idChanging(int value);
    partial void Online2_idChanged();
    #endregion
		
		public intersection()
		{
			this._station = default(EntityRef<station>);
			this._line = default(EntityRef<line>);
			this._line1 = default(EntityRef<line>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intersect_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int intersect_id
		{
			get
			{
				return this._intersect_id;
			}
			set
			{
				if ((this._intersect_id != value))
				{
					this.Onintersect_idChanging(value);
					this.SendPropertyChanging();
					this._intersect_id = value;
					this.SendPropertyChanged("intersect_id");
					this.Onintersect_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_station_id", DbType="Int NOT NULL")]
		public int station_id
		{
			get
			{
				return this._station_id;
			}
			set
			{
				if ((this._station_id != value))
				{
					if (this._station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstation_idChanging(value);
					this.SendPropertyChanging();
					this._station_id = value;
					this.SendPropertyChanged("station_id");
					this.Onstation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line1_id", DbType="Int NOT NULL")]
		public int line1_id
		{
			get
			{
				return this._line1_id;
			}
			set
			{
				if ((this._line1_id != value))
				{
					if (this._line.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Online1_idChanging(value);
					this.SendPropertyChanging();
					this._line1_id = value;
					this.SendPropertyChanged("line1_id");
					this.Online1_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line2_id", DbType="Int NOT NULL")]
		public int line2_id
		{
			get
			{
				return this._line2_id;
			}
			set
			{
				if ((this._line2_id != value))
				{
					if (this._line1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Online2_idChanging(value);
					this.SendPropertyChanging();
					this._line2_id = value;
					this.SendPropertyChanged("line2_id");
					this.Online2_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="station_intersection", Storage="_station", ThisKey="station_id", OtherKey="station_id", IsForeignKey=true)]
		public station station
		{
			get
			{
				return this._station.Entity;
			}
			set
			{
				station previousValue = this._station.Entity;
				if (((previousValue != value) 
							|| (this._station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._station.Entity = null;
						previousValue.intersections.Remove(this);
					}
					this._station.Entity = value;
					if ((value != null))
					{
						value.intersections.Add(this);
						this._station_id = value.station_id;
					}
					else
					{
						this._station_id = default(int);
					}
					this.SendPropertyChanged("station");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="line_intersection", Storage="_line", ThisKey="line1_id", OtherKey="line_id", IsForeignKey=true)]
		public line line
		{
			get
			{
				return this._line.Entity;
			}
			set
			{
				line previousValue = this._line.Entity;
				if (((previousValue != value) 
							|| (this._line.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._line.Entity = null;
						previousValue.intersections.Remove(this);
					}
					this._line.Entity = value;
					if ((value != null))
					{
						value.intersections.Add(this);
						this._line1_id = value.line_id;
					}
					else
					{
						this._line1_id = default(int);
					}
					this.SendPropertyChanged("line");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="line_intersection1", Storage="_line1", ThisKey="line2_id", OtherKey="line_id", IsForeignKey=true)]
		public line line1
		{
			get
			{
				return this._line1.Entity;
			}
			set
			{
				line previousValue = this._line1.Entity;
				if (((previousValue != value) 
							|| (this._line1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._line1.Entity = null;
						previousValue.intersections1.Remove(this);
					}
					this._line1.Entity = value;
					if ((value != null))
					{
						value.intersections1.Add(this);
						this._line2_id = value.line_id;
					}
					else
					{
						this._line2_id = default(int);
					}
					this.SendPropertyChanged("line1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.stations")]
	public partial class station : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _station_id;
		
		private string _station_name;
		
		private EntitySet<intersection> _intersections;
		
		private EntitySet<line_information> _line_informations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstation_idChanging(int value);
    partial void Onstation_idChanged();
    partial void Onstation_nameChanging(string value);
    partial void Onstation_nameChanged();
    #endregion
		
		public station()
		{
			this._intersections = new EntitySet<intersection>(new Action<intersection>(this.attach_intersections), new Action<intersection>(this.detach_intersections));
			this._line_informations = new EntitySet<line_information>(new Action<line_information>(this.attach_line_informations), new Action<line_information>(this.detach_line_informations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_station_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int station_id
		{
			get
			{
				return this._station_id;
			}
			set
			{
				if ((this._station_id != value))
				{
					this.Onstation_idChanging(value);
					this.SendPropertyChanging();
					this._station_id = value;
					this.SendPropertyChanged("station_id");
					this.Onstation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_station_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string station_name
		{
			get
			{
				return this._station_name;
			}
			set
			{
				if ((this._station_name != value))
				{
					this.Onstation_nameChanging(value);
					this.SendPropertyChanging();
					this._station_name = value;
					this.SendPropertyChanged("station_name");
					this.Onstation_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="station_intersection", Storage="_intersections", ThisKey="station_id", OtherKey="station_id")]
		public EntitySet<intersection> intersections
		{
			get
			{
				return this._intersections;
			}
			set
			{
				this._intersections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="station_line_information", Storage="_line_informations", ThisKey="station_id", OtherKey="station_id")]
		public EntitySet<line_information> line_informations
		{
			get
			{
				return this._line_informations;
			}
			set
			{
				this._line_informations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_intersections(intersection entity)
		{
			this.SendPropertyChanging();
			entity.station = this;
		}
		
		private void detach_intersections(intersection entity)
		{
			this.SendPropertyChanging();
			entity.station = null;
		}
		
		private void attach_line_informations(line_information entity)
		{
			this.SendPropertyChanging();
			entity.station = this;
		}
		
		private void detach_line_informations(line_information entity)
		{
			this.SendPropertyChanging();
			entity.station = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.line_information")]
	public partial class line_information : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _info_id;
		
		private int _line_id;
		
		private int _station_id;
		
		private int _position;
		
		private decimal _distance_to_next;
		
		private decimal _time_to_next;
		
		private System.Nullable<decimal> _delay_to_next;
		
		private EntityRef<station> _station;
		
		private EntityRef<line> _line;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oninfo_idChanging(int value);
    partial void Oninfo_idChanged();
    partial void Online_idChanging(int value);
    partial void Online_idChanged();
    partial void Onstation_idChanging(int value);
    partial void Onstation_idChanged();
    partial void OnpositionChanging(int value);
    partial void OnpositionChanged();
    partial void Ondistance_to_nextChanging(decimal value);
    partial void Ondistance_to_nextChanged();
    partial void Ontime_to_nextChanging(decimal value);
    partial void Ontime_to_nextChanged();
    partial void Ondelay_to_nextChanging(System.Nullable<decimal> value);
    partial void Ondelay_to_nextChanged();
    #endregion
		
		public line_information()
		{
			this._station = default(EntityRef<station>);
			this._line = default(EntityRef<line>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_info_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int info_id
		{
			get
			{
				return this._info_id;
			}
			set
			{
				if ((this._info_id != value))
				{
					this.Oninfo_idChanging(value);
					this.SendPropertyChanging();
					this._info_id = value;
					this.SendPropertyChanged("info_id");
					this.Oninfo_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line_id", DbType="Int NOT NULL")]
		public int line_id
		{
			get
			{
				return this._line_id;
			}
			set
			{
				if ((this._line_id != value))
				{
					if (this._line.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Online_idChanging(value);
					this.SendPropertyChanging();
					this._line_id = value;
					this.SendPropertyChanged("line_id");
					this.Online_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_station_id", DbType="Int NOT NULL")]
		public int station_id
		{
			get
			{
				return this._station_id;
			}
			set
			{
				if ((this._station_id != value))
				{
					if (this._station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstation_idChanging(value);
					this.SendPropertyChanging();
					this._station_id = value;
					this.SendPropertyChanged("station_id");
					this.Onstation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="Int NOT NULL")]
		public int position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distance_to_next", DbType="Decimal(10,2) NOT NULL")]
		public decimal distance_to_next
		{
			get
			{
				return this._distance_to_next;
			}
			set
			{
				if ((this._distance_to_next != value))
				{
					this.Ondistance_to_nextChanging(value);
					this.SendPropertyChanging();
					this._distance_to_next = value;
					this.SendPropertyChanged("distance_to_next");
					this.Ondistance_to_nextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_to_next", DbType="Decimal(10,2) NOT NULL")]
		public decimal time_to_next
		{
			get
			{
				return this._time_to_next;
			}
			set
			{
				if ((this._time_to_next != value))
				{
					this.Ontime_to_nextChanging(value);
					this.SendPropertyChanging();
					this._time_to_next = value;
					this.SendPropertyChanged("time_to_next");
					this.Ontime_to_nextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_delay_to_next", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> delay_to_next
		{
			get
			{
				return this._delay_to_next;
			}
			set
			{
				if ((this._delay_to_next != value))
				{
					this.Ondelay_to_nextChanging(value);
					this.SendPropertyChanging();
					this._delay_to_next = value;
					this.SendPropertyChanged("delay_to_next");
					this.Ondelay_to_nextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="station_line_information", Storage="_station", ThisKey="station_id", OtherKey="station_id", IsForeignKey=true)]
		public station station
		{
			get
			{
				return this._station.Entity;
			}
			set
			{
				station previousValue = this._station.Entity;
				if (((previousValue != value) 
							|| (this._station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._station.Entity = null;
						previousValue.line_informations.Remove(this);
					}
					this._station.Entity = value;
					if ((value != null))
					{
						value.line_informations.Add(this);
						this._station_id = value.station_id;
					}
					else
					{
						this._station_id = default(int);
					}
					this.SendPropertyChanged("station");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="line_line_information", Storage="_line", ThisKey="line_id", OtherKey="line_id", IsForeignKey=true)]
		public line line
		{
			get
			{
				return this._line.Entity;
			}
			set
			{
				line previousValue = this._line.Entity;
				if (((previousValue != value) 
							|| (this._line.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._line.Entity = null;
						previousValue.line_informations.Remove(this);
					}
					this._line.Entity = value;
					if ((value != null))
					{
						value.line_informations.Add(this);
						this._line_id = value.line_id;
					}
					else
					{
						this._line_id = default(int);
					}
					this.SendPropertyChanged("line");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lines")]
	public partial class line : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _line_id;
		
		private string _line_name;
		
		private EntitySet<intersection> _intersections;
		
		private EntitySet<intersection> _intersections1;
		
		private EntitySet<line_information> _line_informations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Online_idChanging(int value);
    partial void Online_idChanged();
    partial void Online_nameChanging(string value);
    partial void Online_nameChanged();
    #endregion
		
		public line()
		{
			this._intersections = new EntitySet<intersection>(new Action<intersection>(this.attach_intersections), new Action<intersection>(this.detach_intersections));
			this._intersections1 = new EntitySet<intersection>(new Action<intersection>(this.attach_intersections1), new Action<intersection>(this.detach_intersections1));
			this._line_informations = new EntitySet<line_information>(new Action<line_information>(this.attach_line_informations), new Action<line_information>(this.detach_line_informations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int line_id
		{
			get
			{
				return this._line_id;
			}
			set
			{
				if ((this._line_id != value))
				{
					this.Online_idChanging(value);
					this.SendPropertyChanging();
					this._line_id = value;
					this.SendPropertyChanged("line_id");
					this.Online_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string line_name
		{
			get
			{
				return this._line_name;
			}
			set
			{
				if ((this._line_name != value))
				{
					this.Online_nameChanging(value);
					this.SendPropertyChanging();
					this._line_name = value;
					this.SendPropertyChanged("line_name");
					this.Online_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="line_intersection", Storage="_intersections", ThisKey="line_id", OtherKey="line1_id")]
		public EntitySet<intersection> intersections
		{
			get
			{
				return this._intersections;
			}
			set
			{
				this._intersections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="line_intersection1", Storage="_intersections1", ThisKey="line_id", OtherKey="line2_id")]
		public EntitySet<intersection> intersections1
		{
			get
			{
				return this._intersections1;
			}
			set
			{
				this._intersections1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="line_line_information", Storage="_line_informations", ThisKey="line_id", OtherKey="line_id")]
		public EntitySet<line_information> line_informations
		{
			get
			{
				return this._line_informations;
			}
			set
			{
				this._line_informations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_intersections(intersection entity)
		{
			this.SendPropertyChanging();
			entity.line = this;
		}
		
		private void detach_intersections(intersection entity)
		{
			this.SendPropertyChanging();
			entity.line = null;
		}
		
		private void attach_intersections1(intersection entity)
		{
			this.SendPropertyChanging();
			entity.line1 = this;
		}
		
		private void detach_intersections1(intersection entity)
		{
			this.SendPropertyChanging();
			entity.line1 = null;
		}
		
		private void attach_line_informations(line_information entity)
		{
			this.SendPropertyChanging();
			entity.line = this;
		}
		
		private void detach_line_informations(line_information entity)
		{
			this.SendPropertyChanging();
			entity.line = null;
		}
	}
}
#pragma warning restore 1591
